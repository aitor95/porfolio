---
import SunIcon from "@icons/Sun.astro";
import MoonIcon from "@icons/Moon.astro";
import SystemIcon from "@icons/System.astro";

const THEMES = ["Light", "Dark", "System"];
let isDark = false;
---

<div class="relative">
  <button
    id="theme-toggle-btn"
    class="appearance-none border-none flex hover:text-accent transition"
  >
    <span class="sr-only">Elige el tema</span>
    <SunIcon id="light" class="theme-toggle-icon size-5 transition-all" />
    <MoonIcon
      id="dark"
      class="theme-toggle-icon absolute size-5 transition-all"
    />
    <SystemIcon
      id="system"
      class="theme-toggle-icon absolute size-5 transition-all"
    />
  </button>
  <nav
    id="themes-menu"
    class="absolute border-slate-400/20 bg-gray-300/60 opacity-0 top-9 right-0 text-sm p-1 min-w-[8rem] rounded-md shadow-[0_3px_10px_rgb(0,0,0,0.2)]"
  >
    <ul>
      {
        THEMES.map((theme) => (
          <li class="themes-menu-option px-2 py-1.5 cursor-pointer hover:bg-neutral-400/40 dark:hover:text-accent rounded-sm transition-all">
            {theme}
          </li>
        ))
      }
    </ul>
  </nav>
</div>

<style>
  #themes-menu.open {
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<script is:inline>
  let remove = null;
  const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
  const themesMenu = document.getElementById("themes-menu");

  function getThemePreference() {
    if (typeof localStorage !== "undefined") {
      return localStorage.getItem("theme") ?? "system";
    }
    return window.matchMedia("(prefers-color-scheme: light)").matches
      ? "dark"
      : "light";
  }
  function updateIcon(themePreference) {
    document.querySelectorAll(".theme-toggle-icon").forEach((element) => {
      element.style.scale = element.id === themePreference ? "1" : "0";
    });
  }

  function updateTheme() {
    if (remove != null) {
      remove();
    }
    matchMedia.addEventListener("change", updateTheme);
    remove = () => {
      matchMedia.removeEventListener("change", updateTheme);
    };

    const themePreference = getThemePreference();
    isDark =
      themePreference === "dark" ||
      (themePreference === "system" && matchMedia.matches);
    updateIcon(themePreference);
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");
  }

  updateTheme();

  document.addEventListener("click", () => themesMenu.classList.remove("open"));

  document.getElementById("theme-toggle-btn").addEventListener("click", (e) => {
    e.stopPropagation();
    const isClosed = !themesMenu.classList.contains("open");
    themesMenu.classList[isClosed ? "add" : "remove"]("open");
  });

  document.querySelectorAll(".themes-menu-option").forEach((element) => {
    element.addEventListener("click", (e) => {
      localStorage.setItem("theme", e.target.innerText.toLowerCase().trim());
      updateTheme();
    });
  });

  document.addEventListener("astro:after-swap", function () {
    if (localStorage.theme === "dark")
      document.documentElement.classList.toggle("dark", true);
  });
</script>
